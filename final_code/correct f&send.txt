#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <SPI.h>
SoftwareSerial mySerial(D3,D4);//0,2
float reading; 
#define LED1 D7
#define LED2 D6
int aa;
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

const char* ssid = "SLT-4G-484E";// Access Denied
const char* password = "B2R543333TE";// 19961112
//WiFiClient client;
char server[] = "192.168.1.103";// 192.168.0.132  


WiFiClient client;    


void setup()  
{
  Serial.begin(115200);
  delay(10);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
 

  Serial.println("Server started");
  Serial.print(WiFi.localIP());
  delay(1000);
  Serial.println("connecting...");
  
  //Serial.begin(9600);
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

  finger.getTemplateCount();
  Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  Serial.println("Waiting for valid finger...");
}
void loop()                     // run over and over again
{
  
  getFingerprintIDez();
  delay(50);
  digitalWrite(LED2, HIGH);
  if(aa>0)
  {
    digitalWrite(LED2, LOW);
    Sending_To_phpmyadmindatabase(aa); 
    digitalWrite(LED1, HIGH);
     delay(2000);
    }else
    {
      digitalWrite(LED1, LOW);
     }
    aa=0;
  //don't ned to run this at full speed.
  
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
  
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence); 

  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;
  
  
  //Serial.println(finger.fingerID);

   aa=finger.fingerID;
  
  Serial.println(aa);
  return finger.fingerID; 
}
void Sending_To_phpmyadmindatabase(int aa)   //CONNECTING WITH MYSQL
 {

//Serial.println("Char : "+String(vl));

  
   if (client.connect(server, 80)) {
    Serial.println("connected");
    //Serial.println(aa);
    // Make a HTTP request:
    Serial.print("GET http://192.168.1.103/Project/arduinoPHP.php?FID="+String(aa)); 
    client.print("GET http://192.168.1.103/Project/arduinoPHP.php?FID="+String(aa));   
    
    //Serial.print("GET http://192.168.1.103/testcode/fsend.php?FID="+String(aa)); 
    //client.print("GET http://192.168.1.103/testcode/fsend.php?FID="+String(aa)); 
    client.print(" ");      //SPACE BEFORE HTTP/1.1
    client.print("HTTP/1.1");
    client.println();
    client.println("Host: Your Local IP");
    client.println("Connection: close");
    client.println();
  } else {
    // if you didn't get a connection to the server:
    Serial.println("connection failed");
  }
 }